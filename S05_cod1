ex01

public void transferMoney(long idSender, long idReceiver, BigDecimal amount) {
    Account sender = accountRepository.findById(idSender)
        .orElseThrow(() -> new AccountNotFoundException());

    Account receiver = accountRepository.findById(idReceiver)
        .orElseThrow(() -> new AccountNotFoundException());

    BigDecimal senderNewAmount = sender.getAmount().subtract(amount);
    BigDecimal receiverNewAmount = receiver.getAmount().add(amount);

    accountRepository.changeAmount(idSender, senderNewAmount);
    accountRepository.changeAmount(idReceiver, receiverNewAmount);
  }
21:22

create table account (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    amount DOUBLE NOT NULL
);
21:30


INSERT INTO account (name,amount) VALUES ('Jane Down', 1000);
INSERT INTO account (name,amount) VALUES ('John Read', 1000);
21:30



Ex02

spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none
21:30



insert into books (title, author, publication_year)
values ('Гарри Поттер', 'Дж. Роулинг', 2000);

insert into books (title, author, publication_year)
values ('Война и мир', 'Лев Толстой', 1950);
21:49

create table books (
                         id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                         title VARCHAR(50) NOT NULL,
                         author varchar(50) NOT NULL,
                         publication_year int
21:49



public Book updateBook(Long id, Book bookDetails){
        Optional<Book> optionalBook = repository.findById(id);
        if (optionalBook.isPresent()) {
            Book book = optionalBook.get();
            book.setTitle(bookDetails.getTitle());
            book.setAuthor(bookDetails.getAuthor());
            book.setPublicationYear(bookDetails.getPublicationYear());
            return repository.save(book);
        } else {
            throw new IllegalArgumentException("Book not found with id: " + id);
        }
    }
);
21:55
